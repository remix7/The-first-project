package com.remix;

public class Day06_4_1_5 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// gys_gbs(10, 15);

		gys_gbs.gys_gbs(10, 5);
	}

	// public static void gys_gbs(int x, int y) {
	// int[] a = new int[getArrayLength(x)];
	// int[] b = new int[getArrayLength(y)];
	// a = serach(x);
	// b = serach(y);
	// System.out.println("最大公约数是：" + serach_max(a, b));
	// System.out.println("最小公倍数是：" + (jiaohuan(a) * jiaohuan(b)));
	// }
	//
	// // /获取数组的长度 即公约数的个数
	// public static int getArrayLength(int x) {
	// int count = 0;
	// for (int i = 1; i <= x / 2; i++) {
	// if (x % i == 0 && x != i) {
	// count++;
	// }
	// }
	// return count;
	// }
	//
	// // 将公约数放入数组中
	// public static int[] serach(int x) {
	// int[] s = new int[getArrayLength(x)];
	// for (int i = 1; i <= x / 2; i++) {
	// if (x % i == 0 && x != i) {
	// s[i] = i;
	// }
	// }
	// return s;
	// }
	//
	// // 找出各自的最大公约数
	// public static int jiaohuan(int[] x) {
	// int max = 0;
	// for (int i = 0; i < x.length; i++) {
	// if (x[i] > max) {
	// max = x[i];
	// }
	// }
	// return max;
	// }
	//
	// // 找出共有的最大公约数
	// public static int serach_max(int[] a, int[] b) {
	// int max = 0;
	// for (int i = 0; i < a.length; i++) {
	// for (int j = 0; j < b.length; j++) {
	// if (a[i] == a[j]) {
	// if (max < a[i]) {
	// max = a[i];
	// break;
	// }
	// }
	// }
	// }
	// return max;
	// }
	//
}

class gys_gbs {
	public static void gys_gbs(int x, int y) {
		int[] a = new int[getArrayLength(x)];
		int[] b = new int[getArrayLength(y)];
		a = serach(x);
		b = serach(y);
		int source_max_gys = getMax(a, b);
		int source_min_gbs = getMix(a) * getMix(b);
		System.out.println("最大公约数是："+source_max_gys);
		System.out.println("最小公倍数是："+source_min_gbs);
	}

	// 找出公约数的个数
	public static int getArrayLength(int x) {
		int count = 0;
		for (int i = 1; i <= x / 2; i++) {
			if (x % i == 0 && x != i) {
				count++;
			}
		}
		return count;
	}

	// 中出公约数并放入数组中
	public static int[] serach(int x) {
		int[] s = new int[getArrayLength(x)];
		for (int i = 1; i <= x / 2; i++) {
			if (x % i == 0 && x != i) {
				s[i] = i;
			}
		}
		return s;
	}

	// 找出两个数的最大公约数
	public static int getMax(int[] a, int[] b) {
		int max = 0;
		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < b.length; j++) {
				if (a[i] == b[j]) {
					if (max < a[i]) {
						max = a[i];
					}
				}
			}
		}
		return max;
	}

	// 找出各自的最大公约数
	public static int getMix(int[] a) {
		int max = 0;
		for (int i = 0; i < a.length; i++) {
			if (max < a[i]) {
				max = a[i];
			}
		}
		return max;
	}

}
